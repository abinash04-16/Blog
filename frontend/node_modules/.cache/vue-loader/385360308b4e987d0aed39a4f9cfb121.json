{"remainingRequest":"/home/abinash/workspace/vue/project/RailsAndVue2/blogs1/node_modules/vue-loader-v16/dist/index.js??ref--0-1!/home/abinash/workspace/vue/project/RailsAndVue2/blogs1/src/components/comments/commentList.vue?vue&type=template&id=7e6781dc&scoped=true","dependencies":[{"path":"/home/abinash/workspace/vue/project/RailsAndVue2/blogs1/src/components/comments/commentList.vue","mtime":1623648689530},{"path":"/home/abinash/workspace/vue/project/RailsAndVue2/blogs1/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/abinash/workspace/vue/project/RailsAndVue2/blogs1/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/abinash/workspace/vue/project/RailsAndVue2/blogs1/node_modules/vue-loader-v16/dist/templateLoader.js","mtime":1616796459000},{"path":"/home/abinash/workspace/vue/project/RailsAndVue2/blogs1/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/abinash/workspace/vue/project/RailsAndVue2/blogs1/node_modules/vue-loader-v16/dist/index.js","mtime":1616796459000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CiAgICA8aDI+Q29tbWVudHM8L2gyPgogICAgICAgIDxkaXYgY2xhc3M9ImdldENvbW1lbnQiPgogICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgcGxhY2Vob2xkZXI9IkVudGVyIHlvdXIgQ29tbWVudCBIZXJlIiB2LW1vZGVsPSJpbkNvbW1lbnQiID4KICAgICAgICAgICAgPGJ1dHRvbiBAY2xpY2s9ImFkZENvbW1lbnQiIGNsYXNzPSJidG4iPkNvbW1lbnQ8L2J1dHRvbj4KICAgICAgICA8L2Rpdj4KCiAgICAgICAgPGRpdiBjbGFzcz0iYWxsQ29tbWVudHMiIHYtaWY9ImNvbW1lbnRzLmxlbmd0aCAhPT0gMCI+CiAgICAgICAgICAgIDxzaW5nbGUtY29tbWVudCB2LWZvcj0iY29tbWVudCBpbiBjb21tZW50cyIKICAgICAgICAgICAgOmtleT0iJycrY29tbWVudC5jb21tZW50SWQiCiAgICAgICAgICAgIDppZD0iJycrY29tbWVudC5jb21tZW50SWQiCiAgICAgICAgICAgIDpjb21tZW50PSJjb21tZW50LmNvbnRlbnQiCiAgICAgICAgICAgIDpwb3N0ZWRBdD0iY29tbWVudC5wb3N0ZWRBdCIKICAgICAgICAgICAgOnVzZXJNYWlsPSJjb21tZW50LnVzZXJfbWFpbCI+PC9zaW5nbGUtY29tbWVudD4KICAgICAgICA8L2Rpdj4KICAgIAo="},{"version":3,"sources":["/home/abinash/workspace/vue/project/RailsAndVue2/blogs1/src/components/comments/commentList.vue"],"names":[],"mappings":";IACI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACZ,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACnjD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAC1C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAC1B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACzB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACzB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAC3B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAClD,CAAC,CAAC,CAAC,CAAC,CAAC","file":"/home/abinash/workspace/vue/project/RailsAndVue2/blogs1/src/components/comments/commentList.vue","sourceRoot":"","sourcesContent":["<template>\n    <h2>Comments</h2>\n        <div class=\"getComment\">\n            <input type=\"text\" placeholder=\"Enter your Comment Here\" v-model=\"inComment\" >\n            <button @click=\"addComment\" class=\"btn\">Comment</button>\n        </div>\n\n        <div class=\"allComments\" v-if=\"comments.length !== 0\">\n            <single-comment v-for=\"comment in comments\"\n            :key=\"''+comment.commentId\"\n            :id=\"''+comment.commentId\"\n            :comment=\"comment.content\"\n            :postedAt=\"comment.postedAt\"\n            :userMail=\"comment.user_mail\"></single-comment>\n        </div>\n    \n</template>\n\n<script>\n    //import firebase from 'firebase';\n    import singleComment from './singleComment.vue';\n    import axios from 'axios';\n    export default {\n        created()\n        {\n            axios.get( `http://localhost:3000/comment/show/${this.$route.params.id}`).then((response) => {\n                console.log(response);\n\n                const comment1 = response.data.comments;\n\n                comment1.forEach((c) => {\n                    const sample = {\n                        commentId: c.id,\n                        postedAt: c.created_at,\n                        content: c.content,\n                        user_id: c.user_id,\n                        blog_id: c.blog_id,\n                        user_mail: c.user_mail,\n                    };\n                    this.comments.unshift(sample);\n                });\n            })\n\n            /*\n            const db = firebase.database();\n            const refer = db.ref().child('comments/'+ this.$route.params.id);\n            console.log(this.$route.params.id);\n            refer.get().then((snapshot) => {\n                snapshot.forEach((snap) =>{\n                        const sample = {\n                            comment: snap.val().comment,\n                            commentId: snap.val().commentId,\n                            postedAt: snap.val().postedAt,\n                            userMail: snap.val().userMail,\n                            blogId: snap.val().blogId,\n                        };\n                        this.comments.push(sample);\n                    });\n            });\n            */\n        },\n        components:{\n            singleComment\n        },\n        props:{\n            blog_id: Number\n        },\n        data(){\n            return{\n                inComment: '',\n                comments:[],\n            };\n        },\n        methods:\n        {\n            addComment()\n            {\n                if(this.inComment !== '')\n                {\n\n                    axios.post( 'http://localhost:3000/comment/add', {\n                        content: this.inComment,\n                        user_id: this.$store.state.user_id,\n                        user_mail: this.$store.state.user_mail,\n                        blog_id: this.blog_id\n                        } ).then((response) => \n                        {\n                            console.log(response);\n                        });\n                        this.inComment='';\n                        this.retriveComments();\n\n                    /*\n                    const temp = new Date().getTime();\n                    const temp1 = ''+temp;\n                    firebase.database().ref('comments/'+this.id+'/'+temp1).set({\n                        postedAt: new Date().toLocaleString(),\n                        comment: this.inComment,\n                        userMail: this.email,\n                        commentId: temp,\n                        blogId: this.id,\n                    });\n                    this.inComment='';\n                    this.retriveComments();\n                    */\n                }\n            },\n\n            retriveComments()\n            {\n                console.log(this.$route.params.id);\n                this.comments.splice(0,this.comments.length);\n                axios.get( `http://localhost:3000/comment/show/${this.$route.params.id}`).then((response) => {\n                    console.log(response);\n\n                    const comment1 = response.data.comments;\n\n                    comment1.forEach((c) => {\n                        const sample = {\n                            commentId: c.id,\n                            postedAt: c.created_at,\n                            content: c.content,\n                            user_id: c.user_id,\n                            blog_id: c.blog_id,\n                            user_mail: c.user_mail,\n                        };\n                        this.comments.unshift(sample);\n                    });\n                });\n\n\n                /*\n                const db = firebase.database();\n                const refer = db.ref().child('comments/'+ this.id);\n                console.log(this.id);\n                refer.get().then((snapshot) => \n                {\n                    snapshot.forEach((snap) =>\n                    {\n                        const sample =\n                        {\n                            comment: snap.val().comment,\n                            commentId: snap.val().commentId,\n                            postedAt: snap.val().postedAt,\n                            userMail: snap.val().userMail,\n                            blogId: snap.val().blogId,\n                        };\n                        this.comments.push(sample);\n                        console.log(sample);\n                    });\n                });\n                */\n            }\n        }\n    }\n</script>\n<style scoped>\n.getComment\n{\n    width: 60%;\n    position: absolute;\n}\n.getComment button\n{\n    width: 10%;\n    float: right;\n    background-color: rgba(7, 118, 223, 0.966);\n    border-radius: 5px;\n    border: none;\n    font-size: 17px;\n    padding: 7px;\n}\n\n.getComment input\n{\n    width: 70%;\n    float: left;\n    font-size: 17px;\n    border-radius: 6px;\n    padding: 7px;\n    background: rgba(7, 118, 223, 0.966);\n}\n.allComments\n{\n    margin-top:100px;\n    margin-bottom: 20px;\n    border: none;\n}\n</style>\n"]}]}