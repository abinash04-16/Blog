{"remainingRequest":"/home/abinash/workspace/vue/project/blogs1/node_modules/vue-loader-v16/dist/index.js??ref--0-1!/home/abinash/workspace/vue/project/blogs1/src/components/comments/commentList.vue?vue&type=style&index=0&id=7e6781dc&scoped=true&lang=css","dependencies":[{"path":"/home/abinash/workspace/vue/project/blogs1/src/components/comments/commentList.vue","mtime":1623062043829},{"path":"/home/abinash/workspace/vue/project/blogs1/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/abinash/workspace/vue/project/blogs1/node_modules/vue-loader-v16/dist/stylePostLoader.js","mtime":1616796459000},{"path":"/home/abinash/workspace/vue/project/blogs1/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/abinash/workspace/vue/project/blogs1/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/abinash/workspace/vue/project/blogs1/node_modules/vue-loader-v16/dist/index.js","mtime":1616796459000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5nZXRDb21tZW50CnsKICAgIHdpZHRoOiAxMDAlOwp9Ci5pdGVtMQp7CiAgICB3aWR0aDo4MCU7Cn0KLml0ZW0yCnsKICAgIHdpZHRoOiAxMCU7Cn0KLml0ZW0KewogICAgZGlzcGxheTogaW5saW5lLWJsb2NrOwp9Ci5jb21tZW50SW5wdXQgaW5wdXQKewogICAgd2lkdGg6IDEwMCU7CiAgICBmb250LXNpemU6IDE3cHg7CiAgICBib3JkZXItcmFkaXVzOiA2cHg7CiAgICBwYWRkaW5nOiA3cHg7CiAgICBiYWNrZ3JvdW5kOiByZ2JhKDcsIDExOCwgMjIzLCAwLjk2Nik7Cn0KLmFsbENvbW1lbnRzCnsKICAgIHBvc2l0aW9uOiByZWxhdGl2ZTsKICAgIG1hcmdpbi10b3A6MzBweDsKICAgIG1hcmdpbi1ib3R0b206IDIwcHg7CiAgICBib3JkZXI6IG5vbmU7Cn0K"},{"version":3,"sources":["/home/abinash/workspace/vue/project/blogs1/src/components/comments/commentList.vue"],"names":[],"mappings":";AAwGA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACV;IACI,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;AACf;AACA,CAAC,CAAC,CAAC,CAAC,CAAC;AACL;IACI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACb;AACA,CAAC,CAAC,CAAC,CAAC,CAAC;AACL;IACI,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AACd;AACA,CAAC,CAAC,CAAC,CAAC;AACJ;IACI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzB;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;AAClB;IACI,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IACX,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IACf,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAClB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACZ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxC;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACX;IACI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAClB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACf,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IACnB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;AAChB","file":"/home/abinash/workspace/vue/project/blogs1/src/components/comments/commentList.vue","sourceRoot":"","sourcesContent":["<template>\n    <h2>Comments</h2>\n    <div class=\"commentInput\">\n        <div class=\"getComment\">\n            <div class='item item1'>\n            <input type=\"text\" placeholder=\"Enter your Comment Here\" v-model=\"inComment\" >\n            </div>\n            <div class='item item2'>\n            <button @click=\"addComment\">Add</button>\n            </div>\n        </div>\n        <div class=\"allComments\" v-if=\"comments.length !== 0\">\n        <single-comment v-for=\"comment in comments\"\n        :key=\"''+comment.commentId\"\n        :id=\"''+comment.commentId\"\n        :comment=\"comment.comment\"\n        :postedAt=\"comment.postedAt\"\n        :userMail=\"comment.userMail\"></single-comment>\n        </div>\n    </div>\n    \n</template>\n\n<script>\n    import firebase from 'firebase';\n    import singleComment from './singleComment.vue';\n    export default {\n        created(){\n            const db = firebase.database();\n            const refer = db.ref().child('comments/'+ this.$route.params.id);\n            console.log(this.$route.params.id);\n            refer.get().then((snapshot) => {\n                snapshot.forEach((snap) =>{\n                        const sample = {\n                            comment: snap.val().comment,\n                            commentId: snap.val().commentId,\n                            postedAt: snap.val().postedAt,\n                            userMail: snap.val().userMail,\n                            blogId: snap.val().blogId,\n                        };\n                        this.comments.push(sample);\n                    });\n            });\n        },\n        components:{\n            singleComment\n        },\n        props:{\n            id: String,\n            email: String,\n        },\n        data(){\n            return{\n                inComment: '',\n                comments:[],\n            };\n        },\n        methods:\n        {\n            addComment()\n            {\n                if(this.inComment !== '')\n                {\n                    const temp = new Date().getTime();\n                    const temp1 = ''+temp;\n                    firebase.database().ref('comments/'+this.id+'/'+temp1).set({\n                        postedAt: new Date().toLocaleString(),\n                        comment: this.inComment,\n                        userMail: this.email,\n                        commentId: temp,\n                        blogId: this.id,\n                    });\n                    this.inComment='';\n                    this.retriveComments();\n                }\n            },\n\n            retriveComments()\n            {\n                this.comments.splice(0,this.comments.length);\n                const db = firebase.database();\n                const refer = db.ref().child('comments/'+ this.id);\n                console.log(this.id);\n                refer.get().then((snapshot) => \n                {\n                    snapshot.forEach((snap) =>\n                    {\n                        const sample =\n                        {\n                            comment: snap.val().comment,\n                            commentId: snap.val().commentId,\n                            postedAt: snap.val().postedAt,\n                            userMail: snap.val().userMail,\n                            blogId: snap.val().blogId,\n                        };\n                        this.comments.push(sample);\n                        console.log(sample);\n                    });\n                });\n            }\n        }\n    }\n</script>\n<style scoped>\n.getComment\n{\n    width: 100%;\n}\n.item1\n{\n    width:80%;\n}\n.item2\n{\n    width: 10%;\n}\n.item\n{\n    display: inline-block;\n}\n.commentInput input\n{\n    width: 100%;\n    font-size: 17px;\n    border-radius: 6px;\n    padding: 7px;\n    background: rgba(7, 118, 223, 0.966);\n}\n.allComments\n{\n    position: relative;\n    margin-top:30px;\n    margin-bottom: 20px;\n    border: none;\n}\n</style>\n"]}]}