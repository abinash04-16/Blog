{"remainingRequest":"/home/abinash/workspace/vue/project/RailsAndVue2/blogs1/node_modules/babel-loader/lib/index.js!/home/abinash/workspace/vue/project/RailsAndVue2/blogs1/node_modules/vue-loader-v16/dist/templateLoader.js??ref--6!/home/abinash/workspace/vue/project/RailsAndVue2/blogs1/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/abinash/workspace/vue/project/RailsAndVue2/blogs1/node_modules/vue-loader-v16/dist/index.js??ref--0-1!/home/abinash/workspace/vue/project/RailsAndVue2/blogs1/src/components/comments/commentList.vue?vue&type=template&id=7e6781dc&scoped=true","dependencies":[{"path":"/home/abinash/workspace/vue/project/RailsAndVue2/blogs1/src/components/comments/commentList.vue","mtime":1623648689530},{"path":"/home/abinash/workspace/vue/project/RailsAndVue2/blogs1/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/abinash/workspace/vue/project/RailsAndVue2/blogs1/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/abinash/workspace/vue/project/RailsAndVue2/blogs1/node_modules/vue-loader-v16/dist/templateLoader.js","mtime":1616796459000},{"path":"/home/abinash/workspace/vue/project/RailsAndVue2/blogs1/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/abinash/workspace/vue/project/RailsAndVue2/blogs1/node_modules/vue-loader-v16/dist/index.js","mtime":1616796459000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgY3JlYXRlVk5vZGUgYXMgX2NyZWF0ZVZOb2RlLCB2TW9kZWxUZXh0IGFzIF92TW9kZWxUZXh0LCB3aXRoRGlyZWN0aXZlcyBhcyBfd2l0aERpcmVjdGl2ZXMsIHJlbmRlckxpc3QgYXMgX3JlbmRlckxpc3QsIEZyYWdtZW50IGFzIF9GcmFnbWVudCwgb3BlbkJsb2NrIGFzIF9vcGVuQmxvY2ssIGNyZWF0ZUJsb2NrIGFzIF9jcmVhdGVCbG9jaywgcmVzb2x2ZUNvbXBvbmVudCBhcyBfcmVzb2x2ZUNvbXBvbmVudCwgY3JlYXRlQ29tbWVudFZOb2RlIGFzIF9jcmVhdGVDb21tZW50Vk5vZGUsIHdpdGhTY29wZUlkIGFzIF93aXRoU2NvcGVJZCwgcHVzaFNjb3BlSWQgYXMgX3B1c2hTY29wZUlkLCBwb3BTY29wZUlkIGFzIF9wb3BTY29wZUlkIH0gZnJvbSAidnVlIjsKCnZhciBfd2l0aElkID0gLyojX19QVVJFX18qL193aXRoU2NvcGVJZCgiZGF0YS12LTdlNjc4MWRjIik7CgpfcHVzaFNjb3BlSWQoImRhdGEtdi03ZTY3ODFkYyIpOwoKdmFyIF9ob2lzdGVkXzEgPSAvKiNfX1BVUkVfXyovX2NyZWF0ZVZOb2RlKCJoMiIsIG51bGwsICJDb21tZW50cyIsIC0xCi8qIEhPSVNURUQgKi8KKTsKCnZhciBfaG9pc3RlZF8yID0gewogIGNsYXNzOiAiZ2V0Q29tbWVudCIKfTsKdmFyIF9ob2lzdGVkXzMgPSB7CiAga2V5OiAwLAogIGNsYXNzOiAiYWxsQ29tbWVudHMiCn07CgpfcG9wU2NvcGVJZCgpOwoKZXhwb3J0IHZhciByZW5kZXIgPSAvKiNfX1BVUkVfXyovX3dpdGhJZChmdW5jdGlvbiAoX2N0eCwgX2NhY2hlLCAkcHJvcHMsICRzZXR1cCwgJGRhdGEsICRvcHRpb25zKSB7CiAgdmFyIF9jb21wb25lbnRfc2luZ2xlX2NvbW1lbnQgPSBfcmVzb2x2ZUNvbXBvbmVudCgic2luZ2xlLWNvbW1lbnQiKTsKCiAgcmV0dXJuIF9vcGVuQmxvY2soKSwgX2NyZWF0ZUJsb2NrKF9GcmFnbWVudCwgbnVsbCwgW19ob2lzdGVkXzEsIF9jcmVhdGVWTm9kZSgiZGl2IiwgX2hvaXN0ZWRfMiwgW193aXRoRGlyZWN0aXZlcyhfY3JlYXRlVk5vZGUoImlucHV0IiwgewogICAgdHlwZTogInRleHQiLAogICAgcGxhY2Vob2xkZXI6ICJFbnRlciB5b3VyIENvbW1lbnQgSGVyZSIsCiAgICAib25VcGRhdGU6bW9kZWxWYWx1ZSI6IF9jYWNoZVsxXSB8fCAoX2NhY2hlWzFdID0gZnVuY3Rpb24gKCRldmVudCkgewogICAgICByZXR1cm4gJGRhdGEuaW5Db21tZW50ID0gJGV2ZW50OwogICAgfSkKICB9LCBudWxsLCA1MTIKICAvKiBORUVEX1BBVENIICovCiAgKSwgW1tfdk1vZGVsVGV4dCwgJGRhdGEuaW5Db21tZW50XV0pLCBfY3JlYXRlVk5vZGUoImJ1dHRvbiIsIHsKICAgIG9uQ2xpY2s6IF9jYWNoZVsyXSB8fCAoX2NhY2hlWzJdID0gZnVuY3Rpb24gKCkgewogICAgICByZXR1cm4gJG9wdGlvbnMuYWRkQ29tbWVudCAmJiAkb3B0aW9ucy5hZGRDb21tZW50LmFwcGx5KCRvcHRpb25zLCBhcmd1bWVudHMpOwogICAgfSksCiAgICBjbGFzczogImJ0biIKICB9LCAiQ29tbWVudCIpXSksICRkYXRhLmNvbW1lbnRzLmxlbmd0aCAhPT0gMCA/IChfb3BlbkJsb2NrKCksIF9jcmVhdGVCbG9jaygiZGl2IiwgX2hvaXN0ZWRfMywgWyhfb3BlbkJsb2NrKHRydWUpLCBfY3JlYXRlQmxvY2soX0ZyYWdtZW50LCBudWxsLCBfcmVuZGVyTGlzdCgkZGF0YS5jb21tZW50cywgZnVuY3Rpb24gKGNvbW1lbnQpIHsKICAgIHJldHVybiBfb3BlbkJsb2NrKCksIF9jcmVhdGVCbG9jayhfY29tcG9uZW50X3NpbmdsZV9jb21tZW50LCB7CiAgICAgIGtleTogJycgKyBjb21tZW50LmNvbW1lbnRJZCwKICAgICAgaWQ6ICcnICsgY29tbWVudC5jb21tZW50SWQsCiAgICAgIGNvbW1lbnQ6IGNvbW1lbnQuY29udGVudCwKICAgICAgcG9zdGVkQXQ6IGNvbW1lbnQucG9zdGVkQXQsCiAgICAgIHVzZXJNYWlsOiBjb21tZW50LnVzZXJfbWFpbAogICAgfSwgbnVsbCwgOAogICAgLyogUFJPUFMgKi8KICAgICwgWyJpZCIsICJjb21tZW50IiwgInBvc3RlZEF0IiwgInVzZXJNYWlsIl0pOwogIH0pLCAxMjgKICAvKiBLRVlFRF9GUkFHTUVOVCAqLwogICkpXSkpIDogX2NyZWF0ZUNvbW1lbnRWTm9kZSgidi1pZiIsIHRydWUpXSwgNjQKICAvKiBTVEFCTEVfRlJBR01FTlQgKi8KICApOwp9KTs="},{"version":3,"sources":["/home/abinash/workspace/vue/project/RailsAndVue2/blogs1/src/components/comments/commentList.vue"],"names":[],"mappings":";;;;;;8BACI,YAAA,CAAiB,IAAjB,EAAiB,IAAjB,EAAI,UAAJ,EAAY,CAAA;AAAA;AAAZ,C;;;AACS,EAAA,KAAK,EAAC;;;;AAKN,EAAA,KAAK,EAAC;;;;;;;;sDANf,U,EACI,YAAA,CAGM,KAHN,EAAA,UAAA,EAGM,C,gBAFF,YAAA,CAA8E,OAA9E,EAA8E;AAAvE,IAAA,IAAI,EAAC,MAAkE;AAA3D,IAAA,WAAW,EAAC,yBAA+C;;aAAZ,KAAA,CAAA,SAAA,GAAS,M;;AAAG,GAA9E,E,IAAA,E;;AAAA,G,iBAAkE,KAAA,CAAA,S,GAEhE,EADF,YAAA,CAAwD,QAAxD,EAAwD;AAA/C,IAAA,OAAK,EAAA,MAAA,CAAA,CAAA,CAAA,KAAA,MAAA,CAAA,CAAA,CAAA,GAAA;AAAA,aAAE,QAAA,CAAA,UAAA,IAAA,QAAA,CAAA,UAAA,OAAA,QAAA,YAAF;AAAA,KAAA,CAA0C;AAA5B,IAAA,KAAK,EAAC;AAAsB,GAAxD,EAAwC,SAAxC,CACE,CAHN,C,EAK+B,KAAA,CAAA,QAAA,CAAS,MAAT,KAAe,C,kBAA9C,YAAA,CAOM,KAPN,EAAA,UAAA,EAOM,E,kBANF,YAAA,CAK+C,SAL/C,EAK+C,IAL/C,EAK+C,WAAA,CALb,KAAA,CAAA,QAKa,EALL,UAAnB,OAAmB,EAAZ;yBAA9B,YAAA,CAK+C,yBAL/C,EAK+C;AAJ9C,MAAA,GAAG,EAAA,KAAK,OAAO,CAAC,SAI8B;AAH9C,MAAA,EAAE,EAAA,KAAK,OAAO,CAAC,SAG+B;AAF9C,MAAA,OAAO,EAAE,OAAO,CAAC,OAE6B;AAD9C,MAAA,QAAQ,EAAE,OAAO,CAAC,QAC4B;AAA9C,MAAA,QAAQ,EAAE,OAAO,CAAC;AAA4B,KAL/C,E,IAAA,E;;AAAA,M,yCAAA,C;GAK+C,CAL/C,E;;AAAA,GAME,EAPN,C","sourcesContent":["<template>\n    <h2>Comments</h2>\n        <div class=\"getComment\">\n            <input type=\"text\" placeholder=\"Enter your Comment Here\" v-model=\"inComment\" >\n            <button @click=\"addComment\" class=\"btn\">Comment</button>\n        </div>\n\n        <div class=\"allComments\" v-if=\"comments.length !== 0\">\n            <single-comment v-for=\"comment in comments\"\n            :key=\"''+comment.commentId\"\n            :id=\"''+comment.commentId\"\n            :comment=\"comment.content\"\n            :postedAt=\"comment.postedAt\"\n            :userMail=\"comment.user_mail\"></single-comment>\n        </div>\n    \n</template>\n\n<script>\n    //import firebase from 'firebase';\n    import singleComment from './singleComment.vue';\n    import axios from 'axios';\n    export default {\n        created()\n        {\n            axios.get( `http://localhost:3000/comment/show/${this.$route.params.id}`).then((response) => {\n                console.log(response);\n\n                const comment1 = response.data.comments;\n\n                comment1.forEach((c) => {\n                    const sample = {\n                        commentId: c.id,\n                        postedAt: c.created_at,\n                        content: c.content,\n                        user_id: c.user_id,\n                        blog_id: c.blog_id,\n                        user_mail: c.user_mail,\n                    };\n                    this.comments.unshift(sample);\n                });\n            })\n\n            /*\n            const db = firebase.database();\n            const refer = db.ref().child('comments/'+ this.$route.params.id);\n            console.log(this.$route.params.id);\n            refer.get().then((snapshot) => {\n                snapshot.forEach((snap) =>{\n                        const sample = {\n                            comment: snap.val().comment,\n                            commentId: snap.val().commentId,\n                            postedAt: snap.val().postedAt,\n                            userMail: snap.val().userMail,\n                            blogId: snap.val().blogId,\n                        };\n                        this.comments.push(sample);\n                    });\n            });\n            */\n        },\n        components:{\n            singleComment\n        },\n        props:{\n            blog_id: Number\n        },\n        data(){\n            return{\n                inComment: '',\n                comments:[],\n            };\n        },\n        methods:\n        {\n            addComment()\n            {\n                if(this.inComment !== '')\n                {\n\n                    axios.post( 'http://localhost:3000/comment/add', {\n                        content: this.inComment,\n                        user_id: this.$store.state.user_id,\n                        user_mail: this.$store.state.user_mail,\n                        blog_id: this.blog_id\n                        } ).then((response) => \n                        {\n                            console.log(response);\n                        });\n                        this.inComment='';\n                        this.retriveComments();\n\n                    /*\n                    const temp = new Date().getTime();\n                    const temp1 = ''+temp;\n                    firebase.database().ref('comments/'+this.id+'/'+temp1).set({\n                        postedAt: new Date().toLocaleString(),\n                        comment: this.inComment,\n                        userMail: this.email,\n                        commentId: temp,\n                        blogId: this.id,\n                    });\n                    this.inComment='';\n                    this.retriveComments();\n                    */\n                }\n            },\n\n            retriveComments()\n            {\n                console.log(this.$route.params.id);\n                this.comments.splice(0,this.comments.length);\n                axios.get( `http://localhost:3000/comment/show/${this.$route.params.id}`).then((response) => {\n                    console.log(response);\n\n                    const comment1 = response.data.comments;\n\n                    comment1.forEach((c) => {\n                        const sample = {\n                            commentId: c.id,\n                            postedAt: c.created_at,\n                            content: c.content,\n                            user_id: c.user_id,\n                            blog_id: c.blog_id,\n                            user_mail: c.user_mail,\n                        };\n                        this.comments.unshift(sample);\n                    });\n                });\n\n\n                /*\n                const db = firebase.database();\n                const refer = db.ref().child('comments/'+ this.id);\n                console.log(this.id);\n                refer.get().then((snapshot) => \n                {\n                    snapshot.forEach((snap) =>\n                    {\n                        const sample =\n                        {\n                            comment: snap.val().comment,\n                            commentId: snap.val().commentId,\n                            postedAt: snap.val().postedAt,\n                            userMail: snap.val().userMail,\n                            blogId: snap.val().blogId,\n                        };\n                        this.comments.push(sample);\n                        console.log(sample);\n                    });\n                });\n                */\n            }\n        }\n    }\n</script>\n<style scoped>\n.getComment\n{\n    width: 60%;\n    position: absolute;\n}\n.getComment button\n{\n    width: 10%;\n    float: right;\n    background-color: rgba(7, 118, 223, 0.966);\n    border-radius: 5px;\n    border: none;\n    font-size: 17px;\n    padding: 7px;\n}\n\n.getComment input\n{\n    width: 70%;\n    float: left;\n    font-size: 17px;\n    border-radius: 6px;\n    padding: 7px;\n    background: rgba(7, 118, 223, 0.966);\n}\n.allComments\n{\n    margin-top:100px;\n    margin-bottom: 20px;\n    border: none;\n}\n</style>\n"],"sourceRoot":""}]}