{"remainingRequest":"/home/abinash/workspace/vue/project/work_on/Blog/frontend/node_modules/babel-loader/lib/index.js!/home/abinash/workspace/vue/project/work_on/Blog/frontend/node_modules/vue-loader-v16/dist/templateLoader.js??ref--6!/home/abinash/workspace/vue/project/work_on/Blog/frontend/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/abinash/workspace/vue/project/work_on/Blog/frontend/node_modules/vue-loader-v16/dist/index.js??ref--0-1!/home/abinash/workspace/vue/project/work_on/Blog/frontend/src/components/comments/commentList.vue?vue&type=template&id=7e6781dc&scoped=true","dependencies":[{"path":"/home/abinash/workspace/vue/project/work_on/Blog/frontend/src/components/comments/commentList.vue","mtime":1623930696126},{"path":"/home/abinash/workspace/vue/project/work_on/Blog/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1623861351826},{"path":"/home/abinash/workspace/vue/project/work_on/Blog/frontend/node_modules/babel-loader/lib/index.js","mtime":1623861349776},{"path":"/home/abinash/workspace/vue/project/work_on/Blog/frontend/node_modules/vue-loader-v16/dist/templateLoader.js","mtime":1623861352987},{"path":"/home/abinash/workspace/vue/project/work_on/Blog/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1623861351826},{"path":"/home/abinash/workspace/vue/project/work_on/Blog/frontend/node_modules/vue-loader-v16/dist/index.js","mtime":1623861352987}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgY3JlYXRlVk5vZGUgYXMgX2NyZWF0ZVZOb2RlLCB2TW9kZWxUZXh0IGFzIF92TW9kZWxUZXh0LCB3aXRoRGlyZWN0aXZlcyBhcyBfd2l0aERpcmVjdGl2ZXMsIHJlbmRlckxpc3QgYXMgX3JlbmRlckxpc3QsIEZyYWdtZW50IGFzIF9GcmFnbWVudCwgb3BlbkJsb2NrIGFzIF9vcGVuQmxvY2ssIGNyZWF0ZUJsb2NrIGFzIF9jcmVhdGVCbG9jaywgcmVzb2x2ZUNvbXBvbmVudCBhcyBfcmVzb2x2ZUNvbXBvbmVudCwgY3JlYXRlQ29tbWVudFZOb2RlIGFzIF9jcmVhdGVDb21tZW50Vk5vZGUsIHdpdGhTY29wZUlkIGFzIF93aXRoU2NvcGVJZCwgcHVzaFNjb3BlSWQgYXMgX3B1c2hTY29wZUlkLCBwb3BTY29wZUlkIGFzIF9wb3BTY29wZUlkIH0gZnJvbSAidnVlIjsKCnZhciBfd2l0aElkID0gLyojX19QVVJFX18qL193aXRoU2NvcGVJZCgiZGF0YS12LTdlNjc4MWRjIik7CgpfcHVzaFNjb3BlSWQoImRhdGEtdi03ZTY3ODFkYyIpOwoKdmFyIF9ob2lzdGVkXzEgPSAvKiNfX1BVUkVfXyovX2NyZWF0ZVZOb2RlKCJoMiIsIG51bGwsICJDb21tZW50cyIsIC0xCi8qIEhPSVNURUQgKi8KKTsKCnZhciBfaG9pc3RlZF8yID0gewogIGNsYXNzOiAiZ2V0Q29tbWVudCIKfTsKdmFyIF9ob2lzdGVkXzMgPSB7CiAga2V5OiAwLAogIGNsYXNzOiAiYWxsQ29tbWVudHMiCn07CgpfcG9wU2NvcGVJZCgpOwoKZXhwb3J0IHZhciByZW5kZXIgPSAvKiNfX1BVUkVfXyovX3dpdGhJZChmdW5jdGlvbiAoX2N0eCwgX2NhY2hlLCAkcHJvcHMsICRzZXR1cCwgJGRhdGEsICRvcHRpb25zKSB7CiAgdmFyIF9jb21wb25lbnRfb25lX2NvbW1lbnQgPSBfcmVzb2x2ZUNvbXBvbmVudCgib25lLWNvbW1lbnQiKTsKCiAgcmV0dXJuIF9vcGVuQmxvY2soKSwgX2NyZWF0ZUJsb2NrKCJkaXYiLCBudWxsLCBbX2hvaXN0ZWRfMSwgX2NyZWF0ZVZOb2RlKCJkaXYiLCBfaG9pc3RlZF8yLCBbX3dpdGhEaXJlY3RpdmVzKF9jcmVhdGVWTm9kZSgiaW5wdXQiLCB7CiAgICB0eXBlOiAidGV4dCIsCiAgICBwbGFjZWhvbGRlcjogIkVudGVyIHlvdXIgQ29tbWVudCBIZXJlIiwKICAgICJvblVwZGF0ZTptb2RlbFZhbHVlIjogX2NhY2hlWzFdIHx8IChfY2FjaGVbMV0gPSBmdW5jdGlvbiAoJGV2ZW50KSB7CiAgICAgIHJldHVybiAkZGF0YS5pbkNvbW1lbnQgPSAkZXZlbnQ7CiAgICB9KQogIH0sIG51bGwsIDUxMgogIC8qIE5FRURfUEFUQ0ggKi8KICApLCBbW192TW9kZWxUZXh0LCAkZGF0YS5pbkNvbW1lbnRdXSksIF9jcmVhdGVWTm9kZSgiYnV0dG9uIiwgewogICAgb25DbGljazogX2NhY2hlWzJdIHx8IChfY2FjaGVbMl0gPSBmdW5jdGlvbiAoKSB7CiAgICAgIHJldHVybiAkb3B0aW9ucy5hZGRDb21tZW50ICYmICRvcHRpb25zLmFkZENvbW1lbnQuYXBwbHkoJG9wdGlvbnMsIGFyZ3VtZW50cyk7CiAgICB9KSwKICAgIGNsYXNzOiAiYnRuIgogIH0sICJDb21tZW50IildKSwgJGRhdGEuY29tbWVudHMubGVuZ3RoICE9PSAwID8gKF9vcGVuQmxvY2soKSwgX2NyZWF0ZUJsb2NrKCJkaXYiLCBfaG9pc3RlZF8zLCBbKF9vcGVuQmxvY2sodHJ1ZSksIF9jcmVhdGVCbG9jayhfRnJhZ21lbnQsIG51bGwsIF9yZW5kZXJMaXN0KCRkYXRhLmNvbW1lbnRzLCBmdW5jdGlvbiAoY29tbWVudCkgewogICAgcmV0dXJuIF9vcGVuQmxvY2soKSwgX2NyZWF0ZUJsb2NrKF9jb21wb25lbnRfb25lX2NvbW1lbnQsIHsKICAgICAga2V5OiBjb21tZW50LmlkLAogICAgICBpZDogY29tbWVudC5pZCwKICAgICAgY29udGVudDogY29tbWVudC5jb250ZW50LAogICAgICB1c2VyX2lkOiBjb21tZW50LnVzZXJfaWQsCiAgICAgIGNyZWF0ZWRBdDogY29tbWVudC5jcmVhdGVkQXQsCiAgICAgIGJsb2dfaWQ6IGNvbW1lbnQuYmxvZ19pZAogICAgfSwgbnVsbCwgOAogICAgLyogUFJPUFMgKi8KICAgICwgWyJpZCIsICJjb250ZW50IiwgInVzZXJfaWQiLCAiY3JlYXRlZEF0IiwgImJsb2dfaWQiXSk7CiAgfSksIDEyOAogIC8qIEtFWUVEX0ZSQUdNRU5UICovCiAgKSldKSkgOiBfY3JlYXRlQ29tbWVudFZOb2RlKCJ2LWlmIiwgdHJ1ZSldKTsKfSk7"},{"version":3,"sources":["/home/abinash/workspace/vue/project/work_on/Blog/frontend/src/components/comments/commentList.vue"],"names":[],"mappings":";;;;;;8BAEQ,YAAA,CAAiB,IAAjB,EAAiB,IAAjB,EAAI,UAAJ,EAAY,CAAA;AAAA;AAAZ,C;;;AACK,EAAA,KAAK,EAAC;;;;AAKN,EAAA,KAAK,EAAC;;;;;;;;uBAPf,YAAA,CAgBM,KAhBN,EAgBM,IAhBN,EAgBM,CAfF,UAeE,EAdF,YAAA,CAGM,KAHN,EAAA,UAAA,EAGM,C,gBAFF,YAAA,CAA8E,OAA9E,EAA8E;AAAvE,IAAA,IAAI,EAAC,MAAkE;AAA3D,IAAA,WAAW,EAAC,yBAA+C;;aAAZ,KAAA,CAAA,SAAA,GAAS,M;;AAAG,GAA9E,E,IAAA,E;;AAAA,G,iBAAkE,KAAA,CAAA,S,GAEhE,EADF,YAAA,CAAwD,QAAxD,EAAwD;AAA/C,IAAA,OAAK,EAAA,MAAA,CAAA,CAAA,CAAA,KAAA,MAAA,CAAA,CAAA,CAAA,GAAA;AAAA,aAAE,QAAA,CAAA,UAAA,IAAA,QAAA,CAAA,UAAA,OAAA,QAAA,YAAF;AAAA,KAAA,CAA0C;AAA5B,IAAA,KAAK,EAAC;AAAsB,GAAxD,EAAwC,SAAxC,CACE,CAHN,CAcE,EAT6B,KAAA,CAAA,QAAA,CAAS,MAAT,KAAe,C,kBAA9C,YAAA,CAQM,KARN,EAAA,UAAA,EAQM,E,kBAPF,YAAA,CAMyC,SANzC,EAMyC,IANzC,EAMyC,WAAA,CANV,KAAA,CAAA,QAMU,EANF,UAAnB,OAAmB,EAAZ;yBAA3B,YAAA,CAMyC,sBANzC,EAMyC;AALxC,MAAA,GAAG,EAAE,OAAO,CAAC,EAK2B;AAJxC,MAAA,EAAE,EAAE,OAAO,CAAC,EAI4B;AAHxC,MAAA,OAAO,EAAE,OAAO,CAAC,OAGuB;AAFxC,MAAA,OAAO,EAAE,OAAO,CAAC,OAEuB;AADxC,MAAA,SAAS,EAAE,OAAO,CAAC,SACqB;AAAxC,MAAA,OAAO,EAAE,OAAO,CAAC;AAAuB,KANzC,E,IAAA,E;;AAAA,M,oDAAA,C;GAMyC,CANzC,E;;AAAA,GAOE,EARN,C,qCASE,CAhBN,C","sourcesContent":["<template>\n    <div>\n        <h2>Comments</h2>\n        <div class=\"getComment\">\n            <input type=\"text\" placeholder=\"Enter your Comment Here\" v-model=\"inComment\" >\n            <button @click=\"addComment\" class=\"btn\">Comment</button>\n        </div>\n            \n        <div class=\"allComments\" v-if='comments.length !== 0'>\n            <one-comment v-for=\"comment in comments\"\n            :key=\"comment.id\"\n            :id='comment.id'\n            :content=\"comment.content\"\n            :user_id=\"comment.user_id\"\n            :createdAt=\"comment.createdAt\"\n            :blog_id=\"comment.blog_id\"></one-comment>\n        </div>\n    </div>\n</template>\n\n<script>\n    //import firebase from 'firebase';\n    //import SingleComment from './singleComment.vue';\n    import oneComment from './oneComment.vue';\n    import axios from 'axios';\n    export default {\n        created()\n        {\n            console.log(this.$route.params.id);\n            this.retriveComments();\n            /*\n\n            axios.get( `http://localhost:3000/comment/show/${this.$route.params.id}`).then((response) => {\n                console.log(response);\n\n                const comment1 = response.data.comments;\n\n                comment1.forEach((c) => {\n                    const sample = {\n                        commentId: c.id,\n                        postedAt: c.created_at,\n                        content: c.content,\n                        user_id: 2,\n                        blog_id: c.blog_id\n                    };\n                    this.comments.unshift(sample);\n                });\n            });\n            */\n\n            /*\n            const db = firebase.database();\n            const refer = db.ref().child('comments/'+ this.$route.params.id);\n            console.log(this.$route.params.id);\n            refer.get().then((snapshot) => {\n                snapshot.forEach((snap) =>{\n                        const sample = {\n                            comment: snap.val().comment,\n                            commentId: snap.val().commentId,\n                            postedAt: snap.val().postedAt,\n                            userMail: snap.val().userMail,\n                            blogId: snap.val().blogId,\n                        };\n                        this.comments.push(sample);\n                    });\n            });\n            */\n        },\n        components:{\n            //SingleComment\n            oneComment\n        },\n        data(){\n            return{\n                inComment: '',\n                comments:[],\n            };\n        },\n        methods:\n        {\n            addComment()\n            {\n                if(this.inComment !== '')\n                {\n\n                    axios.post( 'http://localhost:3000/comment/add', { content: this.inComment, blog_id: this.$route.params.id, });\n                        this.inComment='';\n                        this.retriveComments();\n\n                    /*\n                    const temp = new Date().getTime();\n                    const temp1 = ''+temp;\n                    firebase.database().ref('comments/'+this.id+'/'+temp1).set({\n                        postedAt: new Date().toLocaleString(),\n                        comment: this.inComment,\n                        userMail: this.email,\n                        commentId: temp,\n                        blogId: this.id,\n                    });\n                    this.inComment='';\n                    this.retriveComments();\n                    */\n                }\n            },\n\n            retriveComments()\n            {\n                this.comments.splice(0,this.comments.length);\n                axios.get( `http://localhost:3000/comment/show/${this.$route.params.id}`).then((response) => {\n                    console.log(response);\n                    const comment1 = response.data.comments;\n\n                    comment1.forEach((c) => {\n                        const sample = {\n                            id: c.id,\n                            user_id: c.user_id,\n                            blog_id: c.blog_id,\n                            createdAt: c.created_at,\n                            content: c.content,\n                        };\n                        this.comments.unshift(sample);\n                    });\n                });\n\n                console.log(this.comments);\n\n\n                /*\n                const db = firebase.database();\n                const refer = db.ref().child('comments/'+ this.id);\n                console.log(this.id);\n                refer.get().then((snapshot) => \n                {\n                    snapshot.forEach((snap) =>\n                    {\n                        const sample =\n                        {\n                            comment: snap.val().comment,\n                            commentId: snap.val().commentId,\n                            postedAt: snap.val().postedAt,\n                            userMail: snap.val().userMail,\n                            blogId: snap.val().blogId,\n                        };\n                        this.comments.push(sample);\n                        console.log(sample);\n                    });\n                });\n                */\n            }\n        }\n    }\n</script>\n<style scoped>\n.getComment\n{\n    width: 60%;\n    position: absolute;\n}\n.getComment button\n{\n    width: 10%;\n    float: right;\n    background-color: rgba(7, 118, 223, 0.966);\n    border-radius: 5px;\n    border: none;\n    font-size: 17px;\n    padding: 7px;\n}\n\n.getComment input\n{\n    width: 70%;\n    float: left;\n    font-size: 17px;\n    border-radius: 6px;\n    padding: 7px;\n    background: rgba(7, 118, 223, 0.966);\n}\n.allComments\n{\n    margin-top:100px;\n    margin-bottom: 20px;\n    border: none;\n}\n</style>\n"],"sourceRoot":""}]}